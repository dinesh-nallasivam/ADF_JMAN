{
	"name": "DF_Prep_Customer",
	"properties": {
		"folder": {
			"name": "Question_1"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Sql",
						"type": "DatasetReference"
					},
					"name": "Customer",
					"description": "Extracting the raw customer details "
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Sql",
						"type": "DatasetReference"
					},
					"name": "SinkCleaned",
					"description": "Moving the customer table to the prep stage"
				}
			],
			"transformations": [
				{
					"name": "Select",
					"description": "selecting the specific columns that we need"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Customer",
				"Customer select(mapColumn(",
				"          CustomerID,",
				"          FirstName,",
				"          Email,",
				"          PhoneNumber,",
				"          State,",
				"          Country",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Select",
				"Select derive(State = iif(State , 'd', State)) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SinkCleaned"
			]
		}
	}
}